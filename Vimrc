" NOTE(KA): Have it loaded before pathogen
" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.
runtime! debian.vim
set modeline
set modelines=5

"let g:pymode_run = 1 " <leader>r to run code
"let g:pymode_lint_checker = "pep8,pylint,pyflakes"
"let g:pymode_lint_onfly = 0
"let g:pymode_lint_write = 0
"let g:pymode_lint_ignore = "F0401"
"let g:pymode_lint_signs = 1
"let g:pymode_rope = 1
"let g:pymode_rope_autocomplete_map = '<C-n>'
"let g:pymode_rope_always_show_complete_menu = 1
"let g:pymode_rope_vim_completion = 1
"let g:pymode_folding = 1
"let g:pymode_options = 0
"let g:pymode_virutalenv = 1
"let g:pymode_syntax = 1

let g:pymode_run = 1 " <leader>r to run code
let g:pymode_lint_checkers = []
call add(g:pymode_lint_checkers, 'pep8')
call add(g:pymode_lint_checkers, 'pylint')
let g:pymode_lint_onfly = 0
let g:pymode_lint_on_write = 0
let g:pymode_lint_ignore = "F0401" " unable to import a module
let g:pymode_lint_signs = 1
let g:pymode_rope = 0
"let g:pymode_rope_completion = 1
let g:pymode_rope_complete_on_dot = 0
let g:pymode_rope_show_doc_bind = '' " empty to unset it
let g:pymode_folding = 1
let g:pymode_options = 0
let g:pymode_virutalenv = 1
"let g:pymode_syntax = 1 " disable on slow HW
"let g:pymode_syntax_slow_sync = 1 " disable on slow HW
let g:pymode_syntax_all = 1

set foldlevel=2

" disable some plugings before loading pathogen
let g:pathogen_disabled = []
" call add(g:pathogen_disabled, 'vim-pyunit') " not currently used
runtime bundle/vim-pathogen/autoload/pathogen.vim
execute pathogen#infect()
execute pathogen#helptags()

" All system-wide defaults are set in $VIMRUNTIME/debian.vim (usually just
" /usr/share/vim/vimcurrent/debian.vim) and sourced by the call to :runtime
" you can find below.  If you wish to change any of those settings, you should
" do it in this file (/etc/vim/vimrc), since debian.vim will be overwritten
" everytime an upgrade of the vim packages is performed.  It is recommended to
" make changes after sourcing debian.vim since it alters the value of the
" 'compatible' option.


" Uncomment the next line to make Vim more Vi-compatible
" NOTE: debian.vim sets 'nocompatible'.  Setting 'compatible' changes numerous
" options, so any other options should be set AFTER setting 'compatible'.
"set compatible

" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
syntax on

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
set background=dark

" Uncomment the following to have Vim jump to the last position when
" reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
if has("autocmd")
  filetype plugin indent on
endif

" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
set showcmd		" Show (partial) command in status line.
set showmatch		" Show matching brackets.
"set ignorecase		" Do case insensitive matching
"set smartcase		" Do smart case matching
set incsearch		" Incremental search
"set autowrite		" Automatically save before commands like :next and :make
set hidden		" Hide buffers when they are abandoned
"set mouse=a		" Enable mouse usage (all modes)

nnoremap <leader>fa :call CscopeFindInteractive(expand('<cword>'))<CR>
nnoremap <leader>l :call ToggleLocationList()<CR>



" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif

" KA: Source a local file, when present
if filereadable($HOME."/.vim/Vimrc.local")
  source $HOME/.vim/Vimrc.local
endif

" using cscope.vim to show current function/class in statusline
let g:ctags_path='/usr/bin/ctags-exuberant'
autocmd FileType c,cpp let g:ctags_args="--c++-kinds=+pmef --fields=+iaS --extra=+q --language-force=C++"
let g:ctags_statusline=1
let g:ctags_title=0
let g:ctags_regenerate=1
let generate_tags=1

" statusline: See also pythonhelper plugin which tries (disabled now) to set it for python
" filename
set statusline=%f
" fugitive call
set statusline+=%{fugitive#statusline()}
" python-helper call
set statusline+=%{TagInStatusLine()}
" perforce call
set statusline+=%=%(%{P4RulerStatus()}\ \ %)
" line,cursor and percentace of page for current position
set statusline+=%=%([%l,%c%V]\ %=\ %P%)
